name: Deepfake App CI/CD Pipeline

# Controls when the workflow is triggered
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Define the environment variables for your Docker image
env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/deepfake-detection-app
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Continuous Integration (CI) Phase ---

      - name: Set up Python 3.9 (More stable than 3.10 for OpenCV)
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' 
      
      # We skip installing requirements.txt here and rely on the Docker build 
      # below to handle the complex dependencies (like OpenCV).
      - name: Basic Code Check (Example)
        run: |
          echo "Running basic checks before building the container..."
          python -m compileall .

      # --- Continuous Deployment (CD) Phase ---

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: . # Looks for Dockerfile in the current directory
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}
          # This step will execute the dependency installation defined inside your Dockerfile 
          # which is the most reliable place to handle the OpenCV error.
